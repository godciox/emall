// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password, name, avatar, gender, mobile, birth, zip_code, address, email, login_date, login_failure_count, creation_date, last_updated_date, delete_flag FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Gender,
		&i.Mobile,
		&i.Birth,
		&i.ZipCode,
		&i.Address,
		&i.Email,
		&i.LoginDate,
		&i.LoginFailureCount,
		&i.CreationDate,
		&i.LastUpdatedDate,
		&i.DeleteFlag,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, username, password, name, avatar, gender, mobile, birth, zip_code, address, email, login_date, login_failure_count, creation_date, last_updated_date, delete_flag FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Gender,
		&i.Mobile,
		&i.Birth,
		&i.ZipCode,
		&i.Address,
		&i.Email,
		&i.LoginDate,
		&i.LoginFailureCount,
		&i.CreationDate,
		&i.LastUpdatedDate,
		&i.DeleteFlag,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, username, password, name, avatar, gender, mobile, birth, zip_code, address, email, login_date, login_failure_count, creation_date, last_updated_date, delete_flag FROM users
WHERE mobile = ? LIMIT 1
`

func (q *Queries) GetUserByPhone(ctx context.Context, mobile sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, mobile)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Gender,
		&i.Mobile,
		&i.Birth,
		&i.ZipCode,
		&i.Address,
		&i.Email,
		&i.LoginDate,
		&i.LoginFailureCount,
		&i.CreationDate,
		&i.LastUpdatedDate,
		&i.DeleteFlag,
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT password FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserPassword(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, id)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUserPhoneByID = `-- name: GetUserPhoneByID :one
SELECT mobile FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserPhoneByID(ctx context.Context, id int64) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getUserPhoneByID, id)
	var mobile sql.NullString
	err := row.Scan(&mobile)
	return mobile, err
}

const registerUser = `-- name: RegisterUser :execresult
INSERT INTO users (
    username,password,name,email,mobile,creation_date,gender
) VALUES (
             ?, ? , ? , ? , ?, ?, ?
         )
`

type RegisterUserParams struct {
	Username     string         `json:"username"`
	Password     string         `json:"password"`
	Name         sql.NullString `json:"name"`
	Email        sql.NullString `json:"email"`
	Mobile       sql.NullString `json:"mobile"`
	CreationDate sql.NullTime   `json:"creation_date"`
	Gender       sql.NullInt32  `json:"gender"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, registerUser,
		arg.Username,
		arg.Password,
		arg.Name,
		arg.Email,
		arg.Mobile,
		arg.CreationDate,
		arg.Gender,
	)
}

const updateUserInfo = `-- name: UpdateUserInfo :exec
UPDATE users SET avatar = ?, username = ?, name = ?, gender = ?, birth = ?   where id = ?
`

type UpdateUserInfoParams struct {
	Avatar   sql.NullString `json:"avatar"`
	Username string         `json:"username"`
	Name     sql.NullString `json:"name"`
	Gender   sql.NullInt32  `json:"gender"`
	Birth    sql.NullTime   `json:"birth"`
	ID       int64          `json:"id"`
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateUserInfo,
		arg.Avatar,
		arg.Username,
		arg.Name,
		arg.Gender,
		arg.Birth,
		arg.ID,
	)
	return err
}

const updateUserLoginDate = `-- name: UpdateUserLoginDate :exec
UPDATE users SET login_date = ? , login_failure_count = ? where id = ? or username = ? or mobile = ?
`

type UpdateUserLoginDateParams struct {
	LoginDate         sql.NullTime   `json:"login_date"`
	LoginFailureCount int32          `json:"login_failure_count"`
	ID                int64          `json:"id"`
	Username          string         `json:"username"`
	Mobile            sql.NullString `json:"mobile"`
}

func (q *Queries) UpdateUserLoginDate(ctx context.Context, arg UpdateUserLoginDateParams) error {
	_, err := q.db.ExecContext(ctx, updateUserLoginDate,
		arg.LoginDate,
		arg.LoginFailureCount,
		arg.ID,
		arg.Username,
		arg.Mobile,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password = ? where id = ? or username = ?
`

type UpdateUserPasswordParams struct {
	Password string `json:"password"`
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.ID, arg.Username)
	return err
}

const updateUserUpdateDate = `-- name: UpdateUserUpdateDate :exec
UPDATE users SET last_updated_date = ? where id = ? or username = ? or mobile = ?
`

type UpdateUserUpdateDateParams struct {
	LastUpdatedDate sql.NullTime   `json:"last_updated_date"`
	ID              int64          `json:"id"`
	Username        string         `json:"username"`
	Mobile          sql.NullString `json:"mobile"`
}

func (q *Queries) UpdateUserUpdateDate(ctx context.Context, arg UpdateUserUpdateDateParams) error {
	_, err := q.db.ExecContext(ctx, updateUserUpdateDate,
		arg.LastUpdatedDate,
		arg.ID,
		arg.Username,
		arg.Mobile,
	)
	return err
}
