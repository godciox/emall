// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const checkBrand = `-- name: CheckBrand :one
SELECT name, logo
from brand
where id = ?
`

type CheckBrandRow struct {
	Name string         `json:"name"`
	Logo sql.NullString `json:"logo"`
}

func (q *Queries) CheckBrand(ctx context.Context, id int64) (CheckBrandRow, error) {
	row := q.db.QueryRowContext(ctx, checkBrand, id)
	var i CheckBrandRow
	err := row.Scan(&i.Name, &i.Logo)
	return i, err
}

const checkBrandByProductCategory = `-- name: CheckBrandByProductCategory :many
SELECT product_categories, brands
from product_category_brand
where product_categories = ?
`

func (q *Queries) CheckBrandByProductCategory(ctx context.Context, productCategories int64) ([]ProductCategoryBrand, error) {
	rows, err := q.db.QueryContext(ctx, checkBrandByProductCategory, productCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategoryBrand{}
	for rows.Next() {
		var i ProductCategoryBrand
		if err := rows.Scan(&i.ProductCategories, &i.Brands); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const checkCategory = `-- name: CheckCategory :many
SELECT id, name, seo_title, seo_keywords, seo_description, tree_path, grade, image, parent_id, create_by, creation_date, delete_flag
from product_category
where grade = ?
  or parent_id = ?
  or id = ?
  or name = ?
LIMIT ?
OFFSET ?
`

type CheckCategoryParams struct {
	Grade    int32         `json:"grade"`
	ParentID sql.NullInt64 `json:"parent_id"`
	ID       int64         `json:"id"`
	Name     string        `json:"name"`
	Limit    int32         `json:"limit"`
	Offset   int32         `json:"offset"`
}

func (q *Queries) CheckCategory(ctx context.Context, arg CheckCategoryParams) ([]ProductCategory, error) {
	rows, err := q.db.QueryContext(ctx, checkCategory,
		arg.Grade,
		arg.ParentID,
		arg.ID,
		arg.Name,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategory{}
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SeoTitle,
			&i.SeoKeywords,
			&i.SeoDescription,
			&i.TreePath,
			&i.Grade,
			&i.Image,
			&i.ParentID,
			&i.CreateBy,
			&i.CreationDate,
			&i.DeleteFlag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const checkProductCategoryByBrand = `-- name: CheckProductCategoryByBrand :many
SELECT product_categories, brands
from product_category_brand
where brands = ?
`

func (q *Queries) CheckProductCategoryByBrand(ctx context.Context, brands int64) ([]ProductCategoryBrand, error) {
	rows, err := q.db.QueryContext(ctx, checkProductCategoryByBrand, brands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategoryBrand{}
	for rows.Next() {
		var i ProductCategoryBrand
		if err := rows.Scan(&i.ProductCategories, &i.Brands); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const checkProductImage = `-- name: CheckProductImage :many
SELECT source, thumbnail, title
from product_image
where product_id = ?
  or title = ?
`

type CheckProductImageParams struct {
	ProductID int64          `json:"product_id"`
	Title     sql.NullString `json:"title"`
}

type CheckProductImageRow struct {
	Source    sql.NullString `json:"source"`
	Thumbnail sql.NullString `json:"thumbnail"`
	Title     sql.NullString `json:"title"`
}

func (q *Queries) CheckProductImage(ctx context.Context, arg CheckProductImageParams) ([]CheckProductImageRow, error) {
	rows, err := q.db.QueryContext(ctx, checkProductImage, arg.ProductID, arg.Title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CheckProductImageRow{}
	for rows.Next() {
		var i CheckProductImageRow
		if err := rows.Scan(&i.Source, &i.Thumbnail, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createBrand = `-- name: CreateBrand :execresult
INSERT INTO brand (name, logo, create_by, creation_date)
VALUES (?, ?, ?, ?)
`

type CreateBrandParams struct {
	Name         string         `json:"name"`
	Logo         sql.NullString `json:"logo"`
	CreateBy     sql.NullString `json:"create_by"`
	CreationDate sql.NullTime   `json:"creation_date"`
}

func (q *Queries) CreateBrand(ctx context.Context, arg CreateBrandParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBrand,
		arg.Name,
		arg.Logo,
		arg.CreateBy,
		arg.CreationDate,
	)
}

const createProduct = `-- name: CreateProduct :execresult
INSERT INTO product (sn, name, image, introduction, memo, keyword, seo_title, seo_keywords, seo_description, brand_id,
                     product_category_id, create_by, creation_date, price)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateProductParams struct {
	Sn                string         `json:"sn"`
	Name              string         `json:"name"`
	Image             sql.NullString `json:"image"`
	Introduction      sql.NullString `json:"introduction"`
	Memo              sql.NullString `json:"memo"`
	Keyword           sql.NullString `json:"keyword"`
	SeoTitle          sql.NullString `json:"seo_title"`
	SeoKeywords       sql.NullString `json:"seo_keywords"`
	SeoDescription    sql.NullString `json:"seo_description"`
	BrandID           sql.NullInt64  `json:"brand_id"`
	ProductCategoryID int64          `json:"product_category_id"`
	CreateBy          sql.NullString `json:"create_by"`
	CreationDate      sql.NullTime   `json:"creation_date"`
	Price             interface{}    `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProduct,
		arg.Sn,
		arg.Name,
		arg.Image,
		arg.Introduction,
		arg.Memo,
		arg.Keyword,
		arg.SeoTitle,
		arg.SeoKeywords,
		arg.SeoDescription,
		arg.BrandID,
		arg.ProductCategoryID,
		arg.CreateBy,
		arg.CreationDate,
		arg.Price,
	)
}

const createProductCategory = `-- name: CreateProductCategory :execresult
INSERT INTO product_category (name, seo_title, seo_keywords, seo_description, tree_path, grade, image, parent_id,
                              create_by, creation_date)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateProductCategoryParams struct {
	Name           string         `json:"name"`
	SeoTitle       sql.NullString `json:"seo_title"`
	SeoKeywords    sql.NullString `json:"seo_keywords"`
	SeoDescription sql.NullString `json:"seo_description"`
	TreePath       string         `json:"tree_path"`
	Grade          int32          `json:"grade"`
	Image          sql.NullString `json:"image"`
	ParentID       sql.NullInt64  `json:"parent_id"`
	CreateBy       sql.NullString `json:"create_by"`
	CreationDate   sql.NullTime   `json:"creation_date"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProductCategory,
		arg.Name,
		arg.SeoTitle,
		arg.SeoKeywords,
		arg.SeoDescription,
		arg.TreePath,
		arg.Grade,
		arg.Image,
		arg.ParentID,
		arg.CreateBy,
		arg.CreationDate,
	)
}

const createProductCategoryBrand = `-- name: CreateProductCategoryBrand :execresult
INSERT INTO product_category_brand (product_categories, brands)
VALUES (?, ?)
`

type CreateProductCategoryBrandParams struct {
	ProductCategories int64 `json:"product_categories"`
	Brands            int64 `json:"brands"`
}

func (q *Queries) CreateProductCategoryBrand(ctx context.Context, arg CreateProductCategoryBrandParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProductCategoryBrand, arg.ProductCategories, arg.Brands)
}

const deleteBrand = `-- name: DeleteBrand :exec
DELETE FROM brand
where id = ?
   or name = ?
`

type DeleteBrandParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) DeleteBrand(ctx context.Context, arg DeleteBrandParams) error {
	_, err := q.db.ExecContext(ctx, deleteBrand, arg.ID, arg.Name)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM product_category
where id = ?
   or parent_id = ?
or name = ?
or grade = ?
`

type DeleteCategoryParams struct {
	ID       int64         `json:"id"`
	ParentID sql.NullInt64 `json:"parent_id"`
	Name     string        `json:"name"`
	Grade    int32         `json:"grade"`
}

func (q *Queries) DeleteCategory(ctx context.Context, arg DeleteCategoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteCategory,
		arg.ID,
		arg.ParentID,
		arg.Name,
		arg.Grade,
	)
	return err
}

const deleteProductImg = `-- name: DeleteProductImg :exec
DELETE FROM product_image
where id = ?
   or title = ?
   or product_id = ?
`

type DeleteProductImgParams struct {
	ID        int64          `json:"id"`
	Title     sql.NullString `json:"title"`
	ProductID int64          `json:"product_id"`
}

func (q *Queries) DeleteProductImg(ctx context.Context, arg DeleteProductImgParams) error {
	_, err := q.db.ExecContext(ctx, deleteProductImg, arg.ID, arg.Title, arg.ProductID)
	return err
}

const getProduct = `-- name: GetProduct :many
SELECT id, sn, name, image, introduction, memo, keyword, seo_title, seo_keywords, seo_description, score, price, total_score, score_count, hits, week_hits, month_hits, sales, week_sales, month_sales, brand_id, product_category_id, create_by, creation_date, delete_flag
from product
where id = ?
`

func (q *Queries) GetProduct(ctx context.Context, id int64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProduct, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sn,
			&i.Name,
			&i.Image,
			&i.Introduction,
			&i.Memo,
			&i.Keyword,
			&i.SeoTitle,
			&i.SeoKeywords,
			&i.SeoDescription,
			&i.Score,
			&i.Price,
			&i.TotalScore,
			&i.ScoreCount,
			&i.Hits,
			&i.WeekHits,
			&i.MonthHits,
			&i.Sales,
			&i.WeekSales,
			&i.MonthSales,
			&i.BrandID,
			&i.ProductCategoryID,
			&i.CreateBy,
			&i.CreationDate,
			&i.DeleteFlag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByBrand = `-- name: GetProductByBrand :many
SELECT id, sn, name, image, introduction, memo, keyword, seo_title, seo_keywords, seo_description, score, price, total_score, score_count, hits, week_hits, month_hits, sales, week_sales, month_sales, brand_id, product_category_id, create_by, creation_date, delete_flag
from product
where brand_id = ?
`

func (q *Queries) GetProductByBrand(ctx context.Context, brandID sql.NullInt64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductByBrand, brandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sn,
			&i.Name,
			&i.Image,
			&i.Introduction,
			&i.Memo,
			&i.Keyword,
			&i.SeoTitle,
			&i.SeoKeywords,
			&i.SeoDescription,
			&i.Score,
			&i.Price,
			&i.TotalScore,
			&i.ScoreCount,
			&i.Hits,
			&i.WeekHits,
			&i.MonthHits,
			&i.Sales,
			&i.WeekSales,
			&i.MonthSales,
			&i.BrandID,
			&i.ProductCategoryID,
			&i.CreateBy,
			&i.CreationDate,
			&i.DeleteFlag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByCategory = `-- name: GetProductByCategory :many
SELECT id, sn, name, image, introduction, memo, keyword, seo_title, seo_keywords, seo_description, score, price, total_score, score_count, hits, week_hits, month_hits, sales, week_sales, month_sales, brand_id, product_category_id, create_by, creation_date, delete_flag
from product
where product_category_id = ?
`

func (q *Queries) GetProductByCategory(ctx context.Context, productCategoryID int64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductByCategory, productCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sn,
			&i.Name,
			&i.Image,
			&i.Introduction,
			&i.Memo,
			&i.Keyword,
			&i.SeoTitle,
			&i.SeoKeywords,
			&i.SeoDescription,
			&i.Score,
			&i.Price,
			&i.TotalScore,
			&i.ScoreCount,
			&i.Hits,
			&i.WeekHits,
			&i.MonthHits,
			&i.Sales,
			&i.WeekSales,
			&i.MonthSales,
			&i.BrandID,
			&i.ProductCategoryID,
			&i.CreateBy,
			&i.CreationDate,
			&i.DeleteFlag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductInfoImg = `-- name: GetProductInfoImg :many
SELECT id, title, product_id, source, thumbnail, orders, create_by, creation_date, delete_flag
from product_image
where product_id = ?
`

func (q *Queries) GetProductInfoImg(ctx context.Context, productID int64) ([]ProductImage, error) {
	rows, err := q.db.QueryContext(ctx, getProductInfoImg, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductImage{}
	for rows.Next() {
		var i ProductImage
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ProductID,
			&i.Source,
			&i.Thumbnail,
			&i.Orders,
			&i.CreateBy,
			&i.CreationDate,
			&i.DeleteFlag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProductImage = `-- name: InsertProductImage :execresult
INSERT INTO product_image (title, product_id, source, thumbnail, create_by, creation_date, orders)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type InsertProductImageParams struct {
	Title        sql.NullString `json:"title"`
	ProductID    int64          `json:"product_id"`
	Source       sql.NullString `json:"source"`
	Thumbnail    sql.NullString `json:"thumbnail"`
	CreateBy     sql.NullString `json:"create_by"`
	CreationDate sql.NullTime   `json:"creation_date"`
	Orders       sql.NullInt32  `json:"orders"`
}

func (q *Queries) InsertProductImage(ctx context.Context, arg InsertProductImageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertProductImage,
		arg.Title,
		arg.ProductID,
		arg.Source,
		arg.Thumbnail,
		arg.CreateBy,
		arg.CreationDate,
		arg.Orders,
	)
}

const listProductsByBrand = `-- name: ListProductsByBrand :many
SELECT id, sn, name, image, introduction, memo, keyword, seo_title, seo_keywords, seo_description, score, price, total_score, score_count, hits, week_hits, month_hits, sales, week_sales, month_sales, brand_id, product_category_id, create_by, creation_date, delete_flag
from product
where brand_id = ?  LIMIT ?
OFFSET ?
`

type ListProductsByBrandParams struct {
	BrandID sql.NullInt64 `json:"brand_id"`
	Limit   int32         `json:"limit"`
	Offset  int32         `json:"offset"`
}

func (q *Queries) ListProductsByBrand(ctx context.Context, arg ListProductsByBrandParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByBrand, arg.BrandID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sn,
			&i.Name,
			&i.Image,
			&i.Introduction,
			&i.Memo,
			&i.Keyword,
			&i.SeoTitle,
			&i.SeoKeywords,
			&i.SeoDescription,
			&i.Score,
			&i.Price,
			&i.TotalScore,
			&i.ScoreCount,
			&i.Hits,
			&i.WeekHits,
			&i.MonthHits,
			&i.Sales,
			&i.WeekSales,
			&i.MonthSales,
			&i.BrandID,
			&i.ProductCategoryID,
			&i.CreateBy,
			&i.CreationDate,
			&i.DeleteFlag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByProductCategory = `-- name: ListProductsByProductCategory :many
SELECT id, sn, name, image, introduction, memo, keyword, seo_title, seo_keywords, seo_description, score, price, total_score, score_count, hits, week_hits, month_hits, sales, week_sales, month_sales, brand_id, product_category_id, create_by, creation_date, delete_flag
from product
where product_category_id = ? LIMIT ?
OFFSET ?
`

type ListProductsByProductCategoryParams struct {
	ProductCategoryID int64 `json:"product_category_id"`
	Limit             int32 `json:"limit"`
	Offset            int32 `json:"offset"`
}

func (q *Queries) ListProductsByProductCategory(ctx context.Context, arg ListProductsByProductCategoryParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByProductCategory, arg.ProductCategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sn,
			&i.Name,
			&i.Image,
			&i.Introduction,
			&i.Memo,
			&i.Keyword,
			&i.SeoTitle,
			&i.SeoKeywords,
			&i.SeoDescription,
			&i.Score,
			&i.Price,
			&i.TotalScore,
			&i.ScoreCount,
			&i.Hits,
			&i.WeekHits,
			&i.MonthHits,
			&i.Sales,
			&i.WeekSales,
			&i.MonthSales,
			&i.BrandID,
			&i.ProductCategoryID,
			&i.CreateBy,
			&i.CreationDate,
			&i.DeleteFlag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProducts = `-- name: SearchProducts :many
SELECT id, sn, name, image, introduction, memo, keyword, seo_title, seo_keywords, seo_description, score, price, total_score, score_count, hits, week_hits, month_hits, sales, week_sales, month_sales, brand_id, product_category_id, create_by, creation_date, delete_flag
from product
where name like ? LIMIT ?
OFFSET ?
`

type SearchProductsParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) SearchProducts(ctx context.Context, arg SearchProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, searchProducts, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sn,
			&i.Name,
			&i.Image,
			&i.Introduction,
			&i.Memo,
			&i.Keyword,
			&i.SeoTitle,
			&i.SeoKeywords,
			&i.SeoDescription,
			&i.Score,
			&i.Price,
			&i.TotalScore,
			&i.ScoreCount,
			&i.Hits,
			&i.WeekHits,
			&i.MonthHits,
			&i.Sales,
			&i.WeekSales,
			&i.MonthSales,
			&i.BrandID,
			&i.ProductCategoryID,
			&i.CreateBy,
			&i.CreationDate,
			&i.DeleteFlag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrand = `-- name: UpdateBrand :exec
UPDATE brand
SET name = ?,
    logo = ?
where id = ? or name = ?
`

type UpdateBrandParams struct {
	Name   string         `json:"name"`
	Logo   sql.NullString `json:"logo"`
	ID     int64          `json:"id"`
	Name_2 string         `json:"name_2"`
}

func (q *Queries) UpdateBrand(ctx context.Context, arg UpdateBrandParams) error {
	_, err := q.db.ExecContext(ctx, updateBrand,
		arg.Name,
		arg.Logo,
		arg.ID,
		arg.Name_2,
	)
	return err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE product
SET name = ?,
    image = ?,
    introduction = ?,
    memo = ?,
    keyword = ?,
    seo_title = ?,
    seo_description = ?,
    brand_id = ?,
    product_category_id = ?,
    price = ?
where id = ?
   or sn = ?
   or name = ?
`

type UpdateProductParams struct {
	Name              string         `json:"name"`
	Image             sql.NullString `json:"image"`
	Introduction      sql.NullString `json:"introduction"`
	Memo              sql.NullString `json:"memo"`
	Keyword           sql.NullString `json:"keyword"`
	SeoTitle          sql.NullString `json:"seo_title"`
	SeoDescription    sql.NullString `json:"seo_description"`
	BrandID           sql.NullInt64  `json:"brand_id"`
	ProductCategoryID int64          `json:"product_category_id"`
	ID                int64          `json:"id"`
	Sn                string         `json:"sn"`
	Name_2            string         `json:"name_2"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.Name,
		arg.Image,
		arg.Introduction,
		arg.Memo,
		arg.Keyword,
		arg.SeoTitle,
		arg.SeoDescription,
		arg.BrandID,
		arg.ProductCategoryID,
		arg.ProductCategoryID,
		arg.ID,
		arg.Sn,
		arg.Name_2,
	)
	return err
}

const updateProductCategory = `-- name: UpdateProductCategory :exec
UPDATE product_category
SET name = ?,
    image = ?,
    seo_title = ?,
    seo_keywords = ?,
    seo_description = ?,
    tree_path = ?,
    grade = ?,
    parent_id = ?
where id = ?
   or name = ?
`

type UpdateProductCategoryParams struct {
	Name           string         `json:"name"`
	Image          sql.NullString `json:"image"`
	SeoTitle       sql.NullString `json:"seo_title"`
	SeoKeywords    sql.NullString `json:"seo_keywords"`
	SeoDescription sql.NullString `json:"seo_description"`
	TreePath       string         `json:"tree_path"`
	Grade          int32          `json:"grade"`
	ParentID       sql.NullInt64  `json:"parent_id"`
	ID             int64          `json:"id"`
	Name_2         string         `json:"name_2"`
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateProductCategory,
		arg.Name,
		arg.Image,
		arg.SeoTitle,
		arg.SeoKeywords,
		arg.SeoDescription,
		arg.TreePath,
		arg.Grade,
		arg.ParentID,
		arg.ID,
		arg.Name_2,
	)
	return err
}

const updateProductCategoryOfBrand = `-- name: UpdateProductCategoryOfBrand :exec
UPDATE product_category_brand
SET product_categories = ?,
    brands = ?
where product_categories = ?
   or brands = ?
`

type UpdateProductCategoryOfBrandParams struct {
	ProductCategories   int64 `json:"product_categories"`
	Brands              int64 `json:"brands"`
	ProductCategories_2 int64 `json:"product_categories_2"`
	Brands_2            int64 `json:"brands_2"`
}

func (q *Queries) UpdateProductCategoryOfBrand(ctx context.Context, arg UpdateProductCategoryOfBrandParams) error {
	_, err := q.db.ExecContext(ctx, updateProductCategoryOfBrand,
		arg.ProductCategories,
		arg.Brands,
		arg.ProductCategories_2,
		arg.Brands_2,
	)
	return err
}

const updateProductImage = `-- name: UpdateProductImage :exec
UPDATE product_image
SET source = ?,
    thumbnail = ?
where id = ?
   or title = ?
   or product_id = ?
`

type UpdateProductImageParams struct {
	Source    sql.NullString `json:"source"`
	Thumbnail sql.NullString `json:"thumbnail"`
	ID        int64          `json:"id"`
	Title     sql.NullString `json:"title"`
	ProductID int64          `json:"product_id"`
}

func (q *Queries) UpdateProductImage(ctx context.Context, arg UpdateProductImageParams) error {
	_, err := q.db.ExecContext(ctx, updateProductImage,
		arg.Source,
		arg.Thumbnail,
		arg.ID,
		arg.Title,
		arg.ProductID,
	)
	return err
}
