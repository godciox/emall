// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/hipstershop.proto

package hipstershop

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CartService service

func NewCartServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CartService service

type CartService interface {
	AddItem(ctx context.Context, in *AddItemRequest, opts ...client.CallOption) (*Empty, error)
	GetCart(ctx context.Context, in *GetCartRequest, opts ...client.CallOption) (*Cart, error)
	EmptyCart(ctx context.Context, in *EmptyCartRequest, opts ...client.CallOption) (*Empty, error)
}

type cartService struct {
	c    client.Client
	name string
}

func NewCartService(name string, c client.Client) CartService {
	return &cartService{
		c:    c,
		name: name,
	}
}

func (c *cartService) AddItem(ctx context.Context, in *AddItemRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "CartService.AddItem", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) GetCart(ctx context.Context, in *GetCartRequest, opts ...client.CallOption) (*Cart, error) {
	req := c.c.NewRequest(c.name, "CartService.GetCart", in)
	out := new(Cart)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) EmptyCart(ctx context.Context, in *EmptyCartRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "CartService.EmptyCart", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CartService service

type CartServiceHandler interface {
	AddItem(context.Context, *AddItemRequest, *Empty) error
	GetCart(context.Context, *GetCartRequest, *Cart) error
	EmptyCart(context.Context, *EmptyCartRequest, *Empty) error
}

func RegisterCartServiceHandler(s server.Server, hdlr CartServiceHandler, opts ...server.HandlerOption) error {
	type cartService interface {
		AddItem(ctx context.Context, in *AddItemRequest, out *Empty) error
		GetCart(ctx context.Context, in *GetCartRequest, out *Cart) error
		EmptyCart(ctx context.Context, in *EmptyCartRequest, out *Empty) error
	}
	type CartService struct {
		cartService
	}
	h := &cartServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CartService{h}, opts...))
}

type cartServiceHandler struct {
	CartServiceHandler
}

func (h *cartServiceHandler) AddItem(ctx context.Context, in *AddItemRequest, out *Empty) error {
	return h.CartServiceHandler.AddItem(ctx, in, out)
}

func (h *cartServiceHandler) GetCart(ctx context.Context, in *GetCartRequest, out *Cart) error {
	return h.CartServiceHandler.GetCart(ctx, in, out)
}

func (h *cartServiceHandler) EmptyCart(ctx context.Context, in *EmptyCartRequest, out *Empty) error {
	return h.CartServiceHandler.EmptyCart(ctx, in, out)
}

// Api Endpoints for ProductCatalogService service

func NewProductCatalogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ProductCatalogService service

type ProductCatalogService interface {
	ListProducts(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListProductsResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...client.CallOption) (*Product, error)
	SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...client.CallOption) (*SearchProductsResponse, error)
	InsertProducts(ctx context.Context, in *InsertProductsRequest, opts ...client.CallOption) (*InsertProductsResponse, error)
	OperateProducts(ctx context.Context, in *OperateProductsRequest, opts ...client.CallOption) (*OperateProductsResponse, error)
	InsertCategory(ctx context.Context, in *InsertCategoryRequest, opts ...client.CallOption) (*InsertCategoryResponse, error)
	GetCategory(ctx context.Context, in *CategoryRequest, opts ...client.CallOption) (*CategoryResponse, error)
	DeleteCategory(ctx context.Context, in *CategoryRequest, opts ...client.CallOption) (*CategoryResponse, error)
	ChangeCategory(ctx context.Context, in *InsertCategoryRequest, opts ...client.CallOption) (*InsertCategoryRequest, error)
	GetProductImage(ctx context.Context, in *GetImageRequest, opts ...client.CallOption) (*GetImageResponse, error)
	InsertProductImage(ctx context.Context, in *ImageRequest, opts ...client.CallOption) (*ImageResponse, error)
	ChangeProductImage(ctx context.Context, in *ImageRequest, opts ...client.CallOption) (*ImageResponse, error)
	DeleteProductImage(ctx context.Context, in *DeleteImageRequest, opts ...client.CallOption) (*ImageResponse, error)
	GetBrand(ctx context.Context, in *GetBrandRequest, opts ...client.CallOption) (*GetBrandResponse, error)
	InsertBrand(ctx context.Context, in *BrandRequest, opts ...client.CallOption) (*BrandResponse, error)
	ChangeBrand(ctx context.Context, in *BrandRequest, opts ...client.CallOption) (*BrandRequest, error)
	DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...client.CallOption) (*BrandResponse, error)
}

type productCatalogService struct {
	c    client.Client
	name string
}

func NewProductCatalogService(name string, c client.Client) ProductCatalogService {
	return &productCatalogService{
		c:    c,
		name: name,
	}
}

func (c *productCatalogService) ListProducts(ctx context.Context, in *Empty, opts ...client.CallOption) (*ListProductsResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.ListProducts", in)
	out := new(ListProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) GetProduct(ctx context.Context, in *GetProductRequest, opts ...client.CallOption) (*Product, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.GetProduct", in)
	out := new(Product)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...client.CallOption) (*SearchProductsResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.SearchProducts", in)
	out := new(SearchProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) InsertProducts(ctx context.Context, in *InsertProductsRequest, opts ...client.CallOption) (*InsertProductsResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.InsertProducts", in)
	out := new(InsertProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) OperateProducts(ctx context.Context, in *OperateProductsRequest, opts ...client.CallOption) (*OperateProductsResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.OperateProducts", in)
	out := new(OperateProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) InsertCategory(ctx context.Context, in *InsertCategoryRequest, opts ...client.CallOption) (*InsertCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.InsertCategory", in)
	out := new(InsertCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) GetCategory(ctx context.Context, in *CategoryRequest, opts ...client.CallOption) (*CategoryResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.GetCategory", in)
	out := new(CategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) DeleteCategory(ctx context.Context, in *CategoryRequest, opts ...client.CallOption) (*CategoryResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.DeleteCategory", in)
	out := new(CategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) ChangeCategory(ctx context.Context, in *InsertCategoryRequest, opts ...client.CallOption) (*InsertCategoryRequest, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.ChangeCategory", in)
	out := new(InsertCategoryRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) GetProductImage(ctx context.Context, in *GetImageRequest, opts ...client.CallOption) (*GetImageResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.GetProductImage", in)
	out := new(GetImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) InsertProductImage(ctx context.Context, in *ImageRequest, opts ...client.CallOption) (*ImageResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.InsertProductImage", in)
	out := new(ImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) ChangeProductImage(ctx context.Context, in *ImageRequest, opts ...client.CallOption) (*ImageResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.ChangeProductImage", in)
	out := new(ImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) DeleteProductImage(ctx context.Context, in *DeleteImageRequest, opts ...client.CallOption) (*ImageResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.DeleteProductImage", in)
	out := new(ImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) GetBrand(ctx context.Context, in *GetBrandRequest, opts ...client.CallOption) (*GetBrandResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.GetBrand", in)
	out := new(GetBrandResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) InsertBrand(ctx context.Context, in *BrandRequest, opts ...client.CallOption) (*BrandResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.InsertBrand", in)
	out := new(BrandResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) ChangeBrand(ctx context.Context, in *BrandRequest, opts ...client.CallOption) (*BrandRequest, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.ChangeBrand", in)
	out := new(BrandRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCatalogService) DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...client.CallOption) (*BrandResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.DeleteBrand", in)
	out := new(BrandResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductCatalogService service

type ProductCatalogServiceHandler interface {
	ListProducts(context.Context, *Empty, *ListProductsResponse) error
	GetProduct(context.Context, *GetProductRequest, *Product) error
	SearchProducts(context.Context, *SearchProductsRequest, *SearchProductsResponse) error
	InsertProducts(context.Context, *InsertProductsRequest, *InsertProductsResponse) error
	OperateProducts(context.Context, *OperateProductsRequest, *OperateProductsResponse) error
	InsertCategory(context.Context, *InsertCategoryRequest, *InsertCategoryResponse) error
	GetCategory(context.Context, *CategoryRequest, *CategoryResponse) error
	DeleteCategory(context.Context, *CategoryRequest, *CategoryResponse) error
	ChangeCategory(context.Context, *InsertCategoryRequest, *InsertCategoryRequest) error
	GetProductImage(context.Context, *GetImageRequest, *GetImageResponse) error
	InsertProductImage(context.Context, *ImageRequest, *ImageResponse) error
	ChangeProductImage(context.Context, *ImageRequest, *ImageResponse) error
	DeleteProductImage(context.Context, *DeleteImageRequest, *ImageResponse) error
	GetBrand(context.Context, *GetBrandRequest, *GetBrandResponse) error
	InsertBrand(context.Context, *BrandRequest, *BrandResponse) error
	ChangeBrand(context.Context, *BrandRequest, *BrandRequest) error
	DeleteBrand(context.Context, *DeleteBrandRequest, *BrandResponse) error
}

func RegisterProductCatalogServiceHandler(s server.Server, hdlr ProductCatalogServiceHandler, opts ...server.HandlerOption) error {
	type productCatalogService interface {
		ListProducts(ctx context.Context, in *Empty, out *ListProductsResponse) error
		GetProduct(ctx context.Context, in *GetProductRequest, out *Product) error
		SearchProducts(ctx context.Context, in *SearchProductsRequest, out *SearchProductsResponse) error
		InsertProducts(ctx context.Context, in *InsertProductsRequest, out *InsertProductsResponse) error
		OperateProducts(ctx context.Context, in *OperateProductsRequest, out *OperateProductsResponse) error
		InsertCategory(ctx context.Context, in *InsertCategoryRequest, out *InsertCategoryResponse) error
		GetCategory(ctx context.Context, in *CategoryRequest, out *CategoryResponse) error
		DeleteCategory(ctx context.Context, in *CategoryRequest, out *CategoryResponse) error
		ChangeCategory(ctx context.Context, in *InsertCategoryRequest, out *InsertCategoryRequest) error
		GetProductImage(ctx context.Context, in *GetImageRequest, out *GetImageResponse) error
		InsertProductImage(ctx context.Context, in *ImageRequest, out *ImageResponse) error
		ChangeProductImage(ctx context.Context, in *ImageRequest, out *ImageResponse) error
		DeleteProductImage(ctx context.Context, in *DeleteImageRequest, out *ImageResponse) error
		GetBrand(ctx context.Context, in *GetBrandRequest, out *GetBrandResponse) error
		InsertBrand(ctx context.Context, in *BrandRequest, out *BrandResponse) error
		ChangeBrand(ctx context.Context, in *BrandRequest, out *BrandRequest) error
		DeleteBrand(ctx context.Context, in *DeleteBrandRequest, out *BrandResponse) error
	}
	type ProductCatalogService struct {
		productCatalogService
	}
	h := &productCatalogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductCatalogService{h}, opts...))
}

type productCatalogServiceHandler struct {
	ProductCatalogServiceHandler
}

func (h *productCatalogServiceHandler) ListProducts(ctx context.Context, in *Empty, out *ListProductsResponse) error {
	return h.ProductCatalogServiceHandler.ListProducts(ctx, in, out)
}

func (h *productCatalogServiceHandler) GetProduct(ctx context.Context, in *GetProductRequest, out *Product) error {
	return h.ProductCatalogServiceHandler.GetProduct(ctx, in, out)
}

func (h *productCatalogServiceHandler) SearchProducts(ctx context.Context, in *SearchProductsRequest, out *SearchProductsResponse) error {
	return h.ProductCatalogServiceHandler.SearchProducts(ctx, in, out)
}

func (h *productCatalogServiceHandler) InsertProducts(ctx context.Context, in *InsertProductsRequest, out *InsertProductsResponse) error {
	return h.ProductCatalogServiceHandler.InsertProducts(ctx, in, out)
}

func (h *productCatalogServiceHandler) OperateProducts(ctx context.Context, in *OperateProductsRequest, out *OperateProductsResponse) error {
	return h.ProductCatalogServiceHandler.OperateProducts(ctx, in, out)
}

func (h *productCatalogServiceHandler) InsertCategory(ctx context.Context, in *InsertCategoryRequest, out *InsertCategoryResponse) error {
	return h.ProductCatalogServiceHandler.InsertCategory(ctx, in, out)
}

func (h *productCatalogServiceHandler) GetCategory(ctx context.Context, in *CategoryRequest, out *CategoryResponse) error {
	return h.ProductCatalogServiceHandler.GetCategory(ctx, in, out)
}

func (h *productCatalogServiceHandler) DeleteCategory(ctx context.Context, in *CategoryRequest, out *CategoryResponse) error {
	return h.ProductCatalogServiceHandler.DeleteCategory(ctx, in, out)
}

func (h *productCatalogServiceHandler) ChangeCategory(ctx context.Context, in *InsertCategoryRequest, out *InsertCategoryRequest) error {
	return h.ProductCatalogServiceHandler.ChangeCategory(ctx, in, out)
}

func (h *productCatalogServiceHandler) GetProductImage(ctx context.Context, in *GetImageRequest, out *GetImageResponse) error {
	return h.ProductCatalogServiceHandler.GetProductImage(ctx, in, out)
}

func (h *productCatalogServiceHandler) InsertProductImage(ctx context.Context, in *ImageRequest, out *ImageResponse) error {
	return h.ProductCatalogServiceHandler.InsertProductImage(ctx, in, out)
}

func (h *productCatalogServiceHandler) ChangeProductImage(ctx context.Context, in *ImageRequest, out *ImageResponse) error {
	return h.ProductCatalogServiceHandler.ChangeProductImage(ctx, in, out)
}

func (h *productCatalogServiceHandler) DeleteProductImage(ctx context.Context, in *DeleteImageRequest, out *ImageResponse) error {
	return h.ProductCatalogServiceHandler.DeleteProductImage(ctx, in, out)
}

func (h *productCatalogServiceHandler) GetBrand(ctx context.Context, in *GetBrandRequest, out *GetBrandResponse) error {
	return h.ProductCatalogServiceHandler.GetBrand(ctx, in, out)
}

func (h *productCatalogServiceHandler) InsertBrand(ctx context.Context, in *BrandRequest, out *BrandResponse) error {
	return h.ProductCatalogServiceHandler.InsertBrand(ctx, in, out)
}

func (h *productCatalogServiceHandler) ChangeBrand(ctx context.Context, in *BrandRequest, out *BrandRequest) error {
	return h.ProductCatalogServiceHandler.ChangeBrand(ctx, in, out)
}

func (h *productCatalogServiceHandler) DeleteBrand(ctx context.Context, in *DeleteBrandRequest, out *BrandResponse) error {
	return h.ProductCatalogServiceHandler.DeleteBrand(ctx, in, out)
}

// Api Endpoints for ShippingService service

func NewShippingServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShippingService service

type ShippingService interface {
	GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...client.CallOption) (*GetQuoteResponse, error)
	ShipOrder(ctx context.Context, in *ShipOrderRequest, opts ...client.CallOption) (*ShipOrderResponse, error)
}

type shippingService struct {
	c    client.Client
	name string
}

func NewShippingService(name string, c client.Client) ShippingService {
	return &shippingService{
		c:    c,
		name: name,
	}
}

func (c *shippingService) GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...client.CallOption) (*GetQuoteResponse, error) {
	req := c.c.NewRequest(c.name, "ShippingService.GetQuote", in)
	out := new(GetQuoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingService) ShipOrder(ctx context.Context, in *ShipOrderRequest, opts ...client.CallOption) (*ShipOrderResponse, error) {
	req := c.c.NewRequest(c.name, "ShippingService.ShipOrder", in)
	out := new(ShipOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShippingService service

type ShippingServiceHandler interface {
	GetQuote(context.Context, *GetQuoteRequest, *GetQuoteResponse) error
	ShipOrder(context.Context, *ShipOrderRequest, *ShipOrderResponse) error
}

func RegisterShippingServiceHandler(s server.Server, hdlr ShippingServiceHandler, opts ...server.HandlerOption) error {
	type shippingService interface {
		GetQuote(ctx context.Context, in *GetQuoteRequest, out *GetQuoteResponse) error
		ShipOrder(ctx context.Context, in *ShipOrderRequest, out *ShipOrderResponse) error
	}
	type ShippingService struct {
		shippingService
	}
	h := &shippingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShippingService{h}, opts...))
}

type shippingServiceHandler struct {
	ShippingServiceHandler
}

func (h *shippingServiceHandler) GetQuote(ctx context.Context, in *GetQuoteRequest, out *GetQuoteResponse) error {
	return h.ShippingServiceHandler.GetQuote(ctx, in, out)
}

func (h *shippingServiceHandler) ShipOrder(ctx context.Context, in *ShipOrderRequest, out *ShipOrderResponse) error {
	return h.ShippingServiceHandler.ShipOrder(ctx, in, out)
}

// Api Endpoints for PaymentService service

func NewPaymentServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PaymentService service

type PaymentService interface {
	Charge(ctx context.Context, in *ChargeRequest, opts ...client.CallOption) (*ChargeResponse, error)
}

type paymentService struct {
	c    client.Client
	name string
}

func NewPaymentService(name string, c client.Client) PaymentService {
	return &paymentService{
		c:    c,
		name: name,
	}
}

func (c *paymentService) Charge(ctx context.Context, in *ChargeRequest, opts ...client.CallOption) (*ChargeResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentService.Charge", in)
	out := new(ChargeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentService service

type PaymentServiceHandler interface {
	Charge(context.Context, *ChargeRequest, *ChargeResponse) error
}

func RegisterPaymentServiceHandler(s server.Server, hdlr PaymentServiceHandler, opts ...server.HandlerOption) error {
	type paymentService interface {
		Charge(ctx context.Context, in *ChargeRequest, out *ChargeResponse) error
	}
	type PaymentService struct {
		paymentService
	}
	h := &paymentServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PaymentService{h}, opts...))
}

type paymentServiceHandler struct {
	PaymentServiceHandler
}

func (h *paymentServiceHandler) Charge(ctx context.Context, in *ChargeRequest, out *ChargeResponse) error {
	return h.PaymentServiceHandler.Charge(ctx, in, out)
}

// Api Endpoints for EmailService service

func NewEmailServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EmailService service

type EmailService interface {
	SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, opts ...client.CallOption) (*Empty, error)
}

type emailService struct {
	c    client.Client
	name string
}

func NewEmailService(name string, c client.Client) EmailService {
	return &emailService{
		c:    c,
		name: name,
	}
}

func (c *emailService) SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "EmailService.SendOrderConfirmation", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmailService service

type EmailServiceHandler interface {
	SendOrderConfirmation(context.Context, *SendOrderConfirmationRequest, *Empty) error
}

func RegisterEmailServiceHandler(s server.Server, hdlr EmailServiceHandler, opts ...server.HandlerOption) error {
	type emailService interface {
		SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, out *Empty) error
	}
	type EmailService struct {
		emailService
	}
	h := &emailServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EmailService{h}, opts...))
}

type emailServiceHandler struct {
	EmailServiceHandler
}

func (h *emailServiceHandler) SendOrderConfirmation(ctx context.Context, in *SendOrderConfirmationRequest, out *Empty) error {
	return h.EmailServiceHandler.SendOrderConfirmation(ctx, in, out)
}

// Api Endpoints for OrderService service

func NewOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderService service

type OrderService interface {
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...client.CallOption) (*PlaceOrderResponse, error)
	CheckAllOrderToUser(ctx context.Context, in *CheckOrderRequest, opts ...client.CallOption) (*CheckOrderResponse, error)
	CheckOrderToUserByStatus(ctx context.Context, in *CheckOrderRequest, opts ...client.CallOption) (*CheckOrderResponse, error)
	CheckOrderToUserByDate(ctx context.Context, in *CheckOrderRequest, opts ...client.CallOption) (*CheckOrderResponse, error)
	ChangeStateOfOrder(ctx context.Context, in *ChangeOrderStateRequest, opts ...client.CallOption) (*ChangeOrderStateResponse, error)
	SpikePlaceOrder(ctx context.Context, in *SpikePlaceOrderRequest, opts ...client.CallOption) (*SpikePlaceOrderResponse, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...client.CallOption) (*PlaceOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.PlaceOrder", in)
	out := new(PlaceOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CheckAllOrderToUser(ctx context.Context, in *CheckOrderRequest, opts ...client.CallOption) (*CheckOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CheckAllOrderToUser", in)
	out := new(CheckOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CheckOrderToUserByStatus(ctx context.Context, in *CheckOrderRequest, opts ...client.CallOption) (*CheckOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CheckOrderToUserByStatus", in)
	out := new(CheckOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) CheckOrderToUserByDate(ctx context.Context, in *CheckOrderRequest, opts ...client.CallOption) (*CheckOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CheckOrderToUserByDate", in)
	out := new(CheckOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ChangeStateOfOrder(ctx context.Context, in *ChangeOrderStateRequest, opts ...client.CallOption) (*ChangeOrderStateResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ChangeStateOfOrder", in)
	out := new(ChangeOrderStateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) SpikePlaceOrder(ctx context.Context, in *SpikePlaceOrderRequest, opts ...client.CallOption) (*SpikePlaceOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.SpikePlaceOrder", in)
	out := new(SpikePlaceOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceHandler interface {
	PlaceOrder(context.Context, *PlaceOrderRequest, *PlaceOrderResponse) error
	CheckAllOrderToUser(context.Context, *CheckOrderRequest, *CheckOrderResponse) error
	CheckOrderToUserByStatus(context.Context, *CheckOrderRequest, *CheckOrderResponse) error
	CheckOrderToUserByDate(context.Context, *CheckOrderRequest, *CheckOrderResponse) error
	ChangeStateOfOrder(context.Context, *ChangeOrderStateRequest, *ChangeOrderStateResponse) error
	SpikePlaceOrder(context.Context, *SpikePlaceOrderRequest, *SpikePlaceOrderResponse) error
}

func RegisterOrderServiceHandler(s server.Server, hdlr OrderServiceHandler, opts ...server.HandlerOption) error {
	type orderService interface {
		PlaceOrder(ctx context.Context, in *PlaceOrderRequest, out *PlaceOrderResponse) error
		CheckAllOrderToUser(ctx context.Context, in *CheckOrderRequest, out *CheckOrderResponse) error
		CheckOrderToUserByStatus(ctx context.Context, in *CheckOrderRequest, out *CheckOrderResponse) error
		CheckOrderToUserByDate(ctx context.Context, in *CheckOrderRequest, out *CheckOrderResponse) error
		ChangeStateOfOrder(ctx context.Context, in *ChangeOrderStateRequest, out *ChangeOrderStateResponse) error
		SpikePlaceOrder(ctx context.Context, in *SpikePlaceOrderRequest, out *SpikePlaceOrderResponse) error
	}
	type OrderService struct {
		orderService
	}
	h := &orderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderService{h}, opts...))
}

type orderServiceHandler struct {
	OrderServiceHandler
}

func (h *orderServiceHandler) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, out *PlaceOrderResponse) error {
	return h.OrderServiceHandler.PlaceOrder(ctx, in, out)
}

func (h *orderServiceHandler) CheckAllOrderToUser(ctx context.Context, in *CheckOrderRequest, out *CheckOrderResponse) error {
	return h.OrderServiceHandler.CheckAllOrderToUser(ctx, in, out)
}

func (h *orderServiceHandler) CheckOrderToUserByStatus(ctx context.Context, in *CheckOrderRequest, out *CheckOrderResponse) error {
	return h.OrderServiceHandler.CheckOrderToUserByStatus(ctx, in, out)
}

func (h *orderServiceHandler) CheckOrderToUserByDate(ctx context.Context, in *CheckOrderRequest, out *CheckOrderResponse) error {
	return h.OrderServiceHandler.CheckOrderToUserByDate(ctx, in, out)
}

func (h *orderServiceHandler) ChangeStateOfOrder(ctx context.Context, in *ChangeOrderStateRequest, out *ChangeOrderStateResponse) error {
	return h.OrderServiceHandler.ChangeStateOfOrder(ctx, in, out)
}

func (h *orderServiceHandler) SpikePlaceOrder(ctx context.Context, in *SpikePlaceOrderRequest, out *SpikePlaceOrderResponse) error {
	return h.OrderServiceHandler.SpikePlaceOrder(ctx, in, out)
}

// Api Endpoints for AdService service

func NewAdServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AdService service

type AdService interface {
	GetAds(ctx context.Context, in *AdRequest, opts ...client.CallOption) (*AdResponse, error)
}

type adService struct {
	c    client.Client
	name string
}

func NewAdService(name string, c client.Client) AdService {
	return &adService{
		c:    c,
		name: name,
	}
}

func (c *adService) GetAds(ctx context.Context, in *AdRequest, opts ...client.CallOption) (*AdResponse, error) {
	req := c.c.NewRequest(c.name, "AdService.GetAds", in)
	out := new(AdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdService service

type AdServiceHandler interface {
	GetAds(context.Context, *AdRequest, *AdResponse) error
}

func RegisterAdServiceHandler(s server.Server, hdlr AdServiceHandler, opts ...server.HandlerOption) error {
	type adService interface {
		GetAds(ctx context.Context, in *AdRequest, out *AdResponse) error
	}
	type AdService struct {
		adService
	}
	h := &adServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AdService{h}, opts...))
}

type adServiceHandler struct {
	AdServiceHandler
}

func (h *adServiceHandler) GetAds(ctx context.Context, in *AdRequest, out *AdResponse) error {
	return h.AdServiceHandler.GetAds(ctx, in, out)
}

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	GetUser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	GetUserByPhone(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	RegisterUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	ChangePasswordToUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	CheckPasswordToUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	ChangeInfoToUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	UnregisterUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	LoginByMobile(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	CheckUserIsExisted(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) GetUser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserByPhone(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserByPhone", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RegisterUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.RegisterUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangePasswordToUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ChangePasswordToUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CheckPasswordToUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CheckPasswordToUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangeInfoToUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ChangeInfoToUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UnregisterUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UnregisterUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) LoginByMobile(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.LoginByMobile", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CheckUserIsExisted(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CheckUserIsExisted", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	GetUser(context.Context, *User, *User) error
	GetUserByPhone(context.Context, *User, *User) error
	RegisterUser(context.Context, *User, *UserResponse) error
	ChangePasswordToUser(context.Context, *User, *UserResponse) error
	CheckPasswordToUser(context.Context, *User, *UserResponse) error
	ChangeInfoToUser(context.Context, *User, *UserResponse) error
	UnregisterUser(context.Context, *User, *UserResponse) error
	LoginByMobile(context.Context, *User, *UserResponse) error
	CheckUserIsExisted(context.Context, *User, *UserResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		GetUser(ctx context.Context, in *User, out *User) error
		GetUserByPhone(ctx context.Context, in *User, out *User) error
		RegisterUser(ctx context.Context, in *User, out *UserResponse) error
		ChangePasswordToUser(ctx context.Context, in *User, out *UserResponse) error
		CheckPasswordToUser(ctx context.Context, in *User, out *UserResponse) error
		ChangeInfoToUser(ctx context.Context, in *User, out *UserResponse) error
		UnregisterUser(ctx context.Context, in *User, out *UserResponse) error
		LoginByMobile(ctx context.Context, in *User, out *UserResponse) error
		CheckUserIsExisted(ctx context.Context, in *User, out *UserResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) GetUser(ctx context.Context, in *User, out *User) error {
	return h.UserServiceHandler.GetUser(ctx, in, out)
}

func (h *userServiceHandler) GetUserByPhone(ctx context.Context, in *User, out *User) error {
	return h.UserServiceHandler.GetUserByPhone(ctx, in, out)
}

func (h *userServiceHandler) RegisterUser(ctx context.Context, in *User, out *UserResponse) error {
	return h.UserServiceHandler.RegisterUser(ctx, in, out)
}

func (h *userServiceHandler) ChangePasswordToUser(ctx context.Context, in *User, out *UserResponse) error {
	return h.UserServiceHandler.ChangePasswordToUser(ctx, in, out)
}

func (h *userServiceHandler) CheckPasswordToUser(ctx context.Context, in *User, out *UserResponse) error {
	return h.UserServiceHandler.CheckPasswordToUser(ctx, in, out)
}

func (h *userServiceHandler) ChangeInfoToUser(ctx context.Context, in *User, out *UserResponse) error {
	return h.UserServiceHandler.ChangeInfoToUser(ctx, in, out)
}

func (h *userServiceHandler) UnregisterUser(ctx context.Context, in *User, out *UserResponse) error {
	return h.UserServiceHandler.UnregisterUser(ctx, in, out)
}

func (h *userServiceHandler) LoginByMobile(ctx context.Context, in *User, out *UserResponse) error {
	return h.UserServiceHandler.LoginByMobile(ctx, in, out)
}

func (h *userServiceHandler) CheckUserIsExisted(ctx context.Context, in *User, out *UserResponse) error {
	return h.UserServiceHandler.CheckUserIsExisted(ctx, in, out)
}

// Api Endpoints for InventoryService service

func NewInventoryServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for InventoryService service

type InventoryService interface {
	AdjustInventory(ctx context.Context, in *InventoryRequest, opts ...client.CallOption) (*InventoryResponse, error)
	InsertInventory(ctx context.Context, in *InsertInventoryRequest, opts ...client.CallOption) (*InsertInventoryResponse, error)
	MakeProductHot(ctx context.Context, in *MakeProductHotRequest, opts ...client.CallOption) (*MakeProductHotResponse, error)
	DecreaseInventoryToSpike(ctx context.Context, in *DecreaseInventoryToSpikeReq, opts ...client.CallOption) (*DecreaseInventoryToSpikeRsp, error)
	IncreaseInventoryToSpike(ctx context.Context, in *IncreaseInventoryToSpikeReq, opts ...client.CallOption) (*IncreaseInventoryToSpikeRsp, error)
}

type inventoryService struct {
	c    client.Client
	name string
}

func NewInventoryService(name string, c client.Client) InventoryService {
	return &inventoryService{
		c:    c,
		name: name,
	}
}

func (c *inventoryService) AdjustInventory(ctx context.Context, in *InventoryRequest, opts ...client.CallOption) (*InventoryResponse, error) {
	req := c.c.NewRequest(c.name, "InventoryService.AdjustInventory", in)
	out := new(InventoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) InsertInventory(ctx context.Context, in *InsertInventoryRequest, opts ...client.CallOption) (*InsertInventoryResponse, error) {
	req := c.c.NewRequest(c.name, "InventoryService.InsertInventory", in)
	out := new(InsertInventoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) MakeProductHot(ctx context.Context, in *MakeProductHotRequest, opts ...client.CallOption) (*MakeProductHotResponse, error) {
	req := c.c.NewRequest(c.name, "InventoryService.MakeProductHot", in)
	out := new(MakeProductHotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) DecreaseInventoryToSpike(ctx context.Context, in *DecreaseInventoryToSpikeReq, opts ...client.CallOption) (*DecreaseInventoryToSpikeRsp, error) {
	req := c.c.NewRequest(c.name, "InventoryService.DecreaseInventoryToSpike", in)
	out := new(DecreaseInventoryToSpikeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) IncreaseInventoryToSpike(ctx context.Context, in *IncreaseInventoryToSpikeReq, opts ...client.CallOption) (*IncreaseInventoryToSpikeRsp, error) {
	req := c.c.NewRequest(c.name, "InventoryService.IncreaseInventoryToSpike", in)
	out := new(IncreaseInventoryToSpikeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InventoryService service

type InventoryServiceHandler interface {
	AdjustInventory(context.Context, *InventoryRequest, *InventoryResponse) error
	InsertInventory(context.Context, *InsertInventoryRequest, *InsertInventoryResponse) error
	MakeProductHot(context.Context, *MakeProductHotRequest, *MakeProductHotResponse) error
	DecreaseInventoryToSpike(context.Context, *DecreaseInventoryToSpikeReq, *DecreaseInventoryToSpikeRsp) error
	IncreaseInventoryToSpike(context.Context, *IncreaseInventoryToSpikeReq, *IncreaseInventoryToSpikeRsp) error
}

func RegisterInventoryServiceHandler(s server.Server, hdlr InventoryServiceHandler, opts ...server.HandlerOption) error {
	type inventoryService interface {
		AdjustInventory(ctx context.Context, in *InventoryRequest, out *InventoryResponse) error
		InsertInventory(ctx context.Context, in *InsertInventoryRequest, out *InsertInventoryResponse) error
		MakeProductHot(ctx context.Context, in *MakeProductHotRequest, out *MakeProductHotResponse) error
		DecreaseInventoryToSpike(ctx context.Context, in *DecreaseInventoryToSpikeReq, out *DecreaseInventoryToSpikeRsp) error
		IncreaseInventoryToSpike(ctx context.Context, in *IncreaseInventoryToSpikeReq, out *IncreaseInventoryToSpikeRsp) error
	}
	type InventoryService struct {
		inventoryService
	}
	h := &inventoryServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&InventoryService{h}, opts...))
}

type inventoryServiceHandler struct {
	InventoryServiceHandler
}

func (h *inventoryServiceHandler) AdjustInventory(ctx context.Context, in *InventoryRequest, out *InventoryResponse) error {
	return h.InventoryServiceHandler.AdjustInventory(ctx, in, out)
}

func (h *inventoryServiceHandler) InsertInventory(ctx context.Context, in *InsertInventoryRequest, out *InsertInventoryResponse) error {
	return h.InventoryServiceHandler.InsertInventory(ctx, in, out)
}

func (h *inventoryServiceHandler) MakeProductHot(ctx context.Context, in *MakeProductHotRequest, out *MakeProductHotResponse) error {
	return h.InventoryServiceHandler.MakeProductHot(ctx, in, out)
}

func (h *inventoryServiceHandler) DecreaseInventoryToSpike(ctx context.Context, in *DecreaseInventoryToSpikeReq, out *DecreaseInventoryToSpikeRsp) error {
	return h.InventoryServiceHandler.DecreaseInventoryToSpike(ctx, in, out)
}

func (h *inventoryServiceHandler) IncreaseInventoryToSpike(ctx context.Context, in *IncreaseInventoryToSpikeReq, out *IncreaseInventoryToSpikeRsp) error {
	return h.InventoryServiceHandler.IncreaseInventoryToSpike(ctx, in, out)
}
